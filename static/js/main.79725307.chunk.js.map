{"version":3,"sources":["utils.ts","Leaderboard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useInterval","fn","milliseconds","callback","useRef","useEffect","current","interval","setInterval","clearTimeout","getSize","isClient","window","width","innerWidth","undefined","height","innerHeight","buildImageUrl","url","matchMedia","matches","devicePixelRatio","split","ext","pop","baseName","join","Leaderboard","baseURL","setError","useState","offset","setOffset","count","setCount","data","setData","refreshEnabled","setRefreshEnabled","scoresRef","refreshScores","useCallback","a","fetch","resp","status","camelcaseKeys","json","deep","cur","Date","newData","map","item","modified","parseISO","newScore","created","differenceInSeconds","gameBannerThumbnail","src","image","Image","text","refreshScoresWrapped","nextPage","newOffset","finalOffset","length","Mousetrap","bind","unbind","windowSize","setWindowSize","addEventListener","handleResize","removeEventListener","useWindowSize","useLayoutEffect","containerHeight","clientHeight","firstScore","firstChild","newCount","Math","floor","className","ref","slice","idx","Fragment","key","cx","alt","gameName","chars","Presets","ALPHANUM","value","playerName","timing","NUM","Number","playerScore","toLocaleString","App","useForm","handleSubmit","register","setValue","error","connected","setConnected","initialValue","localStorage","getItem","JSON","parse","console","log","storedValue","setStoredValue","setItem","stringify","useLocalStorage","setUrl","onSubmit","values","leaderboardUrl","then","catch","e","disconnect","requestAnimationFrame","onClick","name","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.79725307.chunk.js","sourcesContent":["import { useEffect, useState, useRef } from \"react\";\n\nconst useInterval = (fn: () => void, milliseconds: number) => {\n  // NOTE: we use useRef here over useState for a few reasons - we don't want to\n  // stop the ticking if the callback changes.\n  const callback = useRef(fn);\n\n  // if the provided function changes, call it once and change its reference.\n  useEffect(() => {\n    callback.current = fn;\n  }, [fn]);\n\n  // when the milliseconds change, reset the timeout\n  useEffect(() => {\n    const interval = setInterval(() => {\n      callback.current();\n    }, milliseconds);\n\n    return () => clearTimeout(interval);\n  }, [callback, milliseconds]);\n};\n\nfunction getSize() {\n  const isClient = typeof window === \"object\";\n\n  return {\n    width: isClient ? window.innerWidth : undefined,\n    height: isClient ? window.innerHeight : undefined,\n  };\n}\n\nfunction useWindowSize() {\n  const [windowSize, setWindowSize] = useState(getSize);\n\n  useEffect(() => {\n    const isClient = typeof window === \"object\";\n\n    if (!isClient) {\n      return;\n    }\n\n    function handleResize() {\n      setWindowSize(getSize());\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return windowSize;\n}\n\nfunction useLocalStorage<T>(\n  key: string,\n  initialValue: T\n): [T, (val: T) => void] {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState<T>(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that persists the\n  // new value to localStorage.\n  const setValue = (value: T) => {\n    try {\n      // Save state\n      setStoredValue(value);\n\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(value));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n\nfunction isHiDpi(): boolean {\n  return !!(\n    (window.matchMedia &&\n      (window.matchMedia(\n        \"only screen and (min-resolution: 124dpi), only screen and (min-resolution: 1.3dppx), only screen and (min-resolution: 48.8dpcm)\"\n      ).matches ||\n        window.matchMedia(\n          \"only screen and (-webkit-min-device-pixel-ratio: 1.3), only screen and (-o-min-device-pixel-ratio: 2.6/2), only screen and (min--moz-device-pixel-ratio: 1.3), only screen and (min-device-pixel-ratio: 1.3)\"\n        ).matches)) ||\n    (window.devicePixelRatio && window.devicePixelRatio > 1.3)\n  );\n}\n\nfunction isRetina(): boolean {\n  return (\n    !!(\n      (window.matchMedia &&\n        (window.matchMedia(\n          \"only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx), only screen and (min-resolution: 75.6dpcm)\"\n        ).matches ||\n          window.matchMedia(\n            \"only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (-o-min-device-pixel-ratio: 2/1), only screen and (min--moz-device-pixel-ratio: 2), only screen and (min-device-pixel-ratio: 2)\"\n          ).matches)) ||\n      (window.devicePixelRatio && window.devicePixelRatio >= 2)\n    ) && /(iPad|iPhone|iPod)/g.test(navigator.userAgent)\n  );\n}\n\nexport { useInterval, useWindowSize, useLocalStorage, isRetina, isHiDpi };\n","import React, {\n  useEffect,\n  useLayoutEffect,\n  useState,\n  useRef,\n  useCallback,\n} from \"react\";\nimport { FlapDisplay, Presets } from \"react-split-flap-effect\";\nimport camelcaseKeys from \"camelcase-keys\";\nimport { parseISO, differenceInSeconds } from \"date-fns\";\nimport cx from \"classnames\";\nimport Mousetrap from \"mousetrap\";\n\nimport \"react-split-flap-effect/extras/themes.css\";\n\nimport { useInterval, useWindowSize, isHiDpi } from \"./utils\";\n\nconst buildImageUrl = (url: string): string => {\n  if (!isHiDpi()) {\n    return url;\n  }\n\n  const split = url.split(\".\");\n  const ext = split.pop();\n  const baseName = split.join(\".\");\n\n  return ext ? `${baseName}@2x.${ext}` : url;\n};\n\ntype ScoreResponse = {\n  id: number;\n  gameName: string;\n  gameBanner: string;\n  gameBannerThumbnail: string;\n  playerName: string;\n  playerScore: number;\n  created: string;\n  modified: string;\n};\n\ntype Score = {\n  id: number;\n  gameName: string;\n  gameBanner: string;\n  gameBannerThumbnail: string;\n  playerName: string;\n  playerScore: number;\n  newScore: boolean;\n};\n\ntype LeaderboardProps = {\n  baseURL: string;\n  setError: (err: string | null) => void;\n};\n\nfunction Leaderboard({ baseURL, setError }: LeaderboardProps) {\n  // Page offset\n  const [offset, setOffset] = useState(0);\n  // Number on current page\n  const [count, setCount] = useState(1);\n  // All score data\n  const [data, setData] = useState<Score[]>([]);\n  // Refresh is disabled on mobile\n  const [refreshEnabled, setRefreshEnabled] = useState(false);\n\n  const scoresRef = useRef<HTMLDivElement>(null);\n\n  const refreshScores = useCallback(async () => {\n    try {\n      const resp = await fetch(`${baseURL}/api/scores/`);\n      if (resp.status === 200) {\n        const data = camelcaseKeys(await resp.json(), {\n          deep: true,\n        }) as ScoreResponse[];\n\n        const cur = new Date();\n\n        const newData = data.map((item) => {\n          const modified = parseISO(item.modified);\n          const created = parseISO(item.created);\n\n          const newScore =\n            modified > created &&\n            differenceInSeconds(cur, modified) < 3600 * 24 * 30;\n          return {\n            ...item,\n            //newScore: Math.random() >= 0.8,\n            gameBannerThumbnail: buildImageUrl(item.gameBannerThumbnail),\n            newScore,\n          };\n        });\n\n        // Any score modified than a day ago should be counted as new.\n        setData(newData);\n\n        // Now that we had a successful request, clear any existing errors.\n        setError(null);\n\n        // Preload all images\n        newData.map(({ gameBannerThumbnail: src }) => {\n          let image = new Image();\n          image.src = src;\n          return image;\n        });\n      } else {\n        const text = await resp.text();\n        setError(\"Failed to get scores: \" + text);\n      }\n    } catch (e) {\n      setError(\"Failed to get scores: \" + e);\n    }\n  }, [baseURL, setData, setError]);\n\n  const refreshScoresWrapped = useCallback(() => {\n    // Unfortunately, the simplest way to handle disabling refreshing is to\n    // still tick, but not do anything.\n    if (!refreshEnabled) {\n      return;\n    }\n\n    refreshScores();\n  }, [refreshEnabled, refreshScores]);\n\n  // Fetch new scores every 30 seconds\n  useInterval(refreshScoresWrapped, 30000);\n\n  // Call fetchNewScores on the page load\n  useEffect(() => {\n    refreshScores();\n  }, [refreshScores]);\n\n  const nextPage = useCallback(() => {\n    const newOffset = offset + count;\n    const finalOffset = newOffset >= data.length ? 0 : newOffset;\n    if (finalOffset !== offset) {\n      setOffset(finalOffset);\n    }\n  }, [offset, count, data, setOffset]);\n\n  // Jump to the next page every 9 seconds\n  useInterval(nextPage, 15000);\n\n  useEffect(() => {\n    Mousetrap.bind(\"space\", nextPage);\n    Mousetrap.bind(\"enter\", nextPage);\n    Mousetrap.bind(\"right\", nextPage);\n\n    return () => {\n      Mousetrap.unbind(\"space\");\n      Mousetrap.unbind(\"enter\");\n      Mousetrap.unbind(\"right\");\n    };\n  }, [nextPage]);\n\n  // When the window size changes if we're not on mobile, reset it to displaying\n  // 1 so we can properly figure out how many items to display.\n  const windowSize = useWindowSize();\n  useLayoutEffect(() => {\n    if (windowSize.width && windowSize.width > 1000) {\n      setCount(1);\n      setRefreshEnabled(true);\n    } else {\n      // On mobile, disable the refresh.\n      setRefreshEnabled(false);\n    }\n  }, [windowSize, setCount, setRefreshEnabled]);\n\n  useLayoutEffect(() => {\n    if (!scoresRef.current) {\n      return;\n    }\n\n    const width = windowSize.width || 0;\n\n    // If we're on mobile, just display everything\n    if (width < 1000) {\n      setCount(data.length);\n      return;\n    }\n\n    const containerHeight = scoresRef.current.clientHeight;\n\n    const firstScore = scoresRef.current.firstChild\n      ?.firstChild as HTMLSpanElement | null;\n    if (!firstScore) {\n      return;\n    }\n\n    // Calculate how many items we can display. Note that the extra plus one\n    // accounts for the line between rows.\n    const newCount = Math.floor(\n      containerHeight / (firstScore.clientHeight + 1)\n    );\n    if (count !== newCount) {\n      setCount(newCount);\n    }\n  }, [count, setCount, scoresRef, data, windowSize]);\n\n  return (\n    <div className=\"scoresContainer\" ref={scoresRef}>\n      <div className=\"scores\">\n        {data.slice(offset, offset + count).map((item, idx) => {\n          return (\n            <React.Fragment key={idx}>\n              {idx !== 0 && <span className=\"line\" />}\n              <span\n                className={cx(\"gameName\", {\n                  newScore: item.newScore,\n                })}\n              >\n                <img src={item.gameBannerThumbnail} alt={item.gameName} />\n              </span>\n              <span\n                className={cx(\"playerName\", {\n                  newScore: item.newScore,\n                })}\n              >\n                <FlapDisplay\n                  className={cx(\"darkBordered\", \"L\")}\n                  chars={Presets.ALPHANUM + \",.!?\"}\n                  length={12}\n                  value={item.playerName}\n                  timing={30}\n                />\n\n                <FlapDisplay\n                  className={cx(\"darkBordered\", \"L\")}\n                  chars={Presets.NUM + \",\"}\n                  length={8}\n                  value={Number(item.playerScore).toLocaleString()}\n                  timing={3}\n                />\n              </span>\n            </React.Fragment>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default Leaderboard;\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport { useForm } from \"react-hook-form\";\n\nimport Leaderboard from \"./Leaderboard\";\nimport { useLocalStorage } from \"./utils\";\n\ntype FormData = {\n  url: string;\n};\n\nfunction App() {\n  const { handleSubmit, register, setValue } = useForm<FormData>();\n\n  // If an error occured\n  const [error, setError] = useState<string | null>(null);\n  const [connected, setConnected] = useState(false);\n  const [url, setUrl] = useLocalStorage(\n    \"leaderboardUrl\",\n    \"https://btta-api.elwert.cloud\"\n  );\n\n  const onSubmit = useCallback(\n    handleSubmit(async (values: FormData) => {\n      localStorage.leaderboardUrl = values.url;\n\n      setConnected(true);\n\n      fetch(`${values.url}/api/scores/`)\n        .then((resp) => {\n          // On successful connection, mark us as connected.\n          if (resp.status === 200) {\n            setError(null);\n            setUrl(values.url);\n          } else {\n            setError(`Unexpected status code: ${resp.status}`);\n          }\n        })\n        .catch((e) => {\n          setError(`Connection error: ${e}`);\n        });\n    }),\n    [handleSubmit, setUrl, setConnected]\n  );\n\n  const disconnect = useCallback(() => {\n    setConnected(false);\n\n    // We need to do this on the next animation frame rather than now so the\n    // form elements will exist.\n    window.requestAnimationFrame(() => {\n      setValue(\"url\", url);\n    });\n  }, [setConnected, setValue, url]);\n\n  // On startup, if there's a provided URL, mark us as connected.\n  useEffect(() => {\n    if (url) {\n      setConnected(true);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const ret = (\n    <div className=\"App\">\n      <header onClick={disconnect}>\n        <img className=\"logo\" src=\"logo.png\" alt=\"Back to the Arcade\" />\n        <img\n          className=\"leaderboard\"\n          src=\"leaderboard-text.png\"\n          alt=\"Leaderboard\"\n        />\n      </header>\n\n      {error && (\n        <div>\n          <h2>Error:</h2>\n          {error}\n        </div>\n      )}\n\n      {connected ? (\n        <Leaderboard baseURL={url} setError={setError} />\n      ) : (\n        <>\n          URL: <input name=\"url\" ref={register} />\n          <button onClick={onSubmit}>Connect</button>\n        </>\n      )}\n\n      <footer>\n        <img src=\"pacman-ghosts.jpg\" alt=\"\" />\n      </footer>\n    </div>\n  );\n\n  return ret;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"normalize.css\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}