{"version":3,"sources":["utils.ts","Leaderboard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useInterval","fn","milliseconds","callback","useRef","useEffect","current","interval","setInterval","clearTimeout","Leaderboard","baseURL","setError","useState","offset","setOffset","count","setCount","data","setData","scoresRef","fetchNewScores","useCallback","a","fetch","resp","status","camelcaseKeys","json","deep","map","item","newScore","differenceInSeconds","Date","parseISO","modified","text","nextPage","newOffset","finalOffset","length","containerHeight","clientHeight","firstScore","firstChild","newCount","Math","floor","className","ref","slice","idx","Fragment","key","id","cx","src","gameBanner","alt","gameName","playerName","Number","playerScore","toLocaleString","App","useForm","handleSubmit","register","setValue","error","url","setUrl","onSubmit","values","localStorage","leaderboardUrl","then","catch","e","disconnect","window","requestAnimationFrame","onClick","name","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.eba4260e.chunk.js","sourcesContent":["import { useEffect, useRef } from \"react\";\n\nconst useInterval = (fn: () => void, milliseconds: number) => {\n  const callback = useRef(fn);\n\n  // if the provided function changes, call it once and change its reference.\n  useEffect(() => {\n    callback.current = fn;\n  }, [fn]);\n\n  // when the milliseconds change, reset the timeout\n  useEffect(() => {\n    const interval = setInterval(() => {\n      callback.current();\n    }, milliseconds);\n\n    return () => clearTimeout(interval)\n  }, [callback, milliseconds]);\n};\n\nexport { useInterval };\n","import React, { useEffect, useState, useRef, useCallback } from \"react\";\nimport camelcaseKeys from \"camelcase-keys\";\nimport { parseISO, differenceInSeconds } from \"date-fns\";\nimport cx from \"classnames\";\n\nimport { useInterval } from \"./utils\";\n\ntype ScoreResponse = {\n  id: number;\n  gameName: string;\n  gameBanner: string;\n  playerName: string;\n  playerScore: number;\n  created: string;\n  modified: string;\n};\n\ntype Score = {\n  id: number;\n  gameName: string;\n  gameBanner: string;\n  playerName: string;\n  playerScore: number;\n  newScore: boolean;\n};\n\ntype LeaderboardProps = {\n  baseURL: string;\n  setError: (err: string | null) => void;\n};\n\nfunction Leaderboard({ baseURL, setError }: LeaderboardProps) {\n  // Page offset\n  const [offset, setOffset] = useState(0);\n  // Number on current page\n  const [count, setCount] = useState(1);\n  // All score data\n  const [data, setData] = useState<Score[]>([]);\n\n  const scoresRef = useRef<HTMLDivElement>(null);\n\n  const fetchNewScores = useCallback(async () => {\n    try {\n      const resp = await fetch(`${baseURL}/api/scores`);\n      if (resp.status === 200) {\n        const data = camelcaseKeys(await resp.json(), {\n          deep: true,\n        }) as ScoreResponse[];\n\n        // Any score modified than a day ago should be counted as new.\n        setData(\n          data.map((item) => ({\n            ...item,\n            newScore:\n              differenceInSeconds(new Date(), parseISO(item.modified)) <\n              3600 * 24 * 30,\n          }))\n        );\n\n        // Now that we had a successful request, clear any existing errors.\n        setError(null);\n      } else {\n        const text = await resp.text();\n        setError(\"Failed to get scores: \" + text);\n      }\n    } catch (e) {\n      setError(\"Failed to get scores: \" + e);\n    }\n  }, [baseURL, setData, setError]);\n\n  // Fetch new scores every 30 seconds\n  useInterval(fetchNewScores, 30000);\n\n  // Call fetchNewScores on the page load\n  useEffect(() => {\n    fetchNewScores();\n  }, [fetchNewScores]);\n\n  const nextPage = useCallback(() => {\n    const newOffset = offset + count;\n    const finalOffset = newOffset >= data.length ? 0 : newOffset;\n    if (finalOffset !== offset) {\n      setOffset(finalOffset);\n    }\n  }, [offset, count, data, setOffset]);\n\n  // Jump to the next page every 10 seconds\n  useInterval(nextPage, 10000);\n\n  useEffect(() => {\n    if (!scoresRef.current) {\n      return;\n    }\n\n    const containerHeight = scoresRef.current.clientHeight;\n\n    const firstScore = scoresRef.current.firstChild\n      ?.firstChild as HTMLSpanElement | null;\n    if (!firstScore) {\n      return;\n    }\n\n    // Calculate how many items we can display.\n    //\n    // NOTE: this will not shrink after the page is reloaded, but it\n    // calculates the right number and this will be a static page, so it's\n    // good enough for me.\n    const newCount = Math.floor(containerHeight / firstScore.clientHeight);\n    if (count !== newCount) {\n      setCount(newCount);\n    }\n  }, [count, setCount, scoresRef, data]);\n\n  return (\n    <div className=\"scoresContainer\" ref={scoresRef}>\n      <div className=\"scores\">\n        {data.slice(offset, offset + count).map((item, idx) => {\n          return (\n            <React.Fragment key={item.id}>\n              {idx !== 0 && <span className=\"line\" />}\n              <span\n                className={cx(\"gameName\", {\n                  newScore: item.newScore,\n                })}\n              >\n                <img src={item.gameBanner} alt={item.gameName} />\n              </span>\n              <span\n                className={cx(\"playerName\", {\n                  newScore: item.newScore,\n                })}\n              >\n                {item.playerName}\n              </span>\n              <span\n                className={cx(\"score\", {\n                  newScore: item.newScore,\n                })}\n              >\n                {Number(item.playerScore).toLocaleString()}\n              </span>\n            </React.Fragment>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default Leaderboard;\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport { useForm } from \"react-hook-form\";\n\nimport Leaderboard from \"./Leaderboard\";\n\ntype FormData = {\n  url: string;\n};\n\nfunction App() {\n  const { handleSubmit, register, setValue } = useForm<FormData>();\n\n  // If an error occured\n  const [error, setError] = useState<string | null>(null);\n  const [url, setUrl] = useState<string | null>(null);\n\n  const onSubmit = useCallback(\n    handleSubmit(async (values: FormData) => {\n      localStorage.leaderboardUrl = values.url;\n\n      fetch(`${values.url}/api/scores`)\n        .then((resp) => {\n          // On successful connection, mark us as connected.\n          if (resp.status === 200) {\n            setError(null);\n            setUrl(values.url);\n          } else {\n            setError(`Unexpected status code: ${resp.status}`);\n          }\n        })\n        .catch((e) => {\n          setError(`Connection error: ${e}`);\n        });\n    }),\n    [handleSubmit, setUrl]\n  );\n\n  const disconnect = useCallback(() => {\n    setUrl(null);\n    if (url) {\n      // We need to do this on the next animation frame rather than now so the\n      // form elements will exist.\n      window.requestAnimationFrame(() => {\n        setValue(\"url\", url);\n      });\n    }\n  }, [setUrl, setValue, url]);\n\n  useEffect(() => {\n    const url = localStorage.leaderboardUrl || \"\";\n    setValue(\"url\", url);\n\n    if (url) {\n      onSubmit();\n    }\n  }, [setValue, onSubmit]);\n\n  const ret = (\n    <div className=\"App\">\n      <header onClick={disconnect}>\n        <img className=\"logo\" src=\"logo.png\" alt=\"Back to the Arcade\" />\n        <img\n          className=\"leaderboard\"\n          src=\"leaderboard-text.png\"\n          alt=\"Leaderboard\"\n        />\n      </header>\n\n      {error && (\n        <div>\n          <h2>Error:</h2>\n          {error}\n        </div>\n      )}\n\n      {url ? (\n        <Leaderboard baseURL={url} setError={setError} />\n      ) : (\n        <>\n          URL: <input name=\"url\" ref={register} />\n          <button onClick={onSubmit}>Connect</button>\n        </>\n      )}\n    </div>\n  );\n\n  return ret;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"normalize.css\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}