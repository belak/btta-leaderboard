{"version":3,"sources":["utils.ts","api.ts","useAPIState.tsx","LeaderboardPage.tsx","ImagePage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useInterval","fn","milliseconds","callback","useRef","useState","trigger","setTrigger","useEffect","current","interval","setInterval","clearTimeout","useCallback","getSize","isClient","window","width","innerWidth","undefined","height","innerHeight","useWindowSize","windowSize","setWindowSize","addEventListener","handleResize","removeEventListener","isMobile","size","buildImageUrl","url","matchMedia","matches","devicePixelRatio","split","ext","pop","baseName","join","useNextPage","realOnNextPage","paused","timeout","onNextPage","resetNextPage","keybindNextPage","Mousetrap","bind","unbind","fetchScores","baseURL","a","fetch","resp","status","camelcaseKeys","json","deep","data","cur","Date","map","item","modified","parseISO","newScore","created","differenceInSeconds","gameBannerThumbnail","text","fetchImages","APIContext","React","createContext","apiReducer","state","action","type","error","images","payload","scores","initialState","APIProvider","props","key","initialValue","localStorage","getItem","JSON","parse","console","log","storedValue","setStoredValue","value","setItem","stringify","useLocalStorage","setBaseURL","useReducer","dispatch","refreshImages","toString","refreshScores","Provider","children","useAPIState","context","useContext","Error","Leaderboard","onFinished","offset","setOffset","count","setCount","length","src","image","Image","scoresRef","newOffset","finalOffset","useLayoutEffect","containerHeight","clientHeight","firstScore","firstChild","newCount","Math","floor","className","ref","slice","idx","Fragment","cx","alt","gameName","playerName","Number","playerScore","toLocaleString","id","ImagePage","page","onMobile","currentImage","name","App","urlInput","setPaused","currentPage","setCurrentPage","imageCounter","setImageCounter","togglePaused","onSubmit","onHeaderClick","requestAnimationFrame","onForm","onLeaderboard","onImages","scoresLoaded","imagesLoaded","onClick","LeaderboardPage","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"yOAGA,SAASA,EAAYC,EAAgBC,GAGnC,IAAMC,EAAWC,iBAAOH,GAHiC,EAI3BI,oBAAS,GAJkB,mBAIlDC,EAJkD,KAIzCC,EAJyC,KAqBzD,OAdAC,qBAAU,WACRL,EAASM,QAAUR,IAClB,CAACA,IAGJO,qBAAU,WACR,IAAME,EAAWC,aAAY,WAC3BR,EAASM,YACRP,GAEH,OAAO,kBAAMU,aAAaF,MACzB,CAACP,EAAUD,EAAcI,IAGrBO,uBAAY,kBAAMN,GAAYD,KAAU,CAACA,EAASC,IAQ3D,SAASO,IACP,IAAMC,EAA6B,kBAAXC,OAExB,MAAO,CACLC,MAAOF,EAAWC,OAAOE,gBAAaC,EACtCC,OAAQL,EAAWC,OAAOK,iBAAcF,GAI5C,SAASG,IAA6B,IAAD,EACCjB,mBAASS,GADV,mBAC5BS,EAD4B,KAChBC,EADgB,KAqBnC,OAlBAhB,qBAAU,WAGR,GAFmC,kBAAXQ,OAYxB,OAFAA,OAAOS,iBAAiB,SAAUC,GAE3B,WACLV,OAAOW,oBAAoB,SAAUD,IAPvC,SAASA,IACPF,EAAcV,QAQf,IAEIS,EAsET,SAASK,EAASC,GAEhB,OAAQA,EAAKZ,OAAS,IAAM,IAG9B,SAASa,EAAcC,GACrB,KAhCGf,OAAOgB,aACLhB,OAAOgB,WACN,mIACAC,SACAjB,OAAOgB,WACL,gNACAC,UACLjB,OAAOkB,kBAAoBlB,OAAOkB,iBAAmB,KA0BtD,OAAOH,EAGT,IAAMI,EAAQJ,EAAII,MAAM,KAClBC,EAAMD,EAAME,MACZC,EAAWH,EAAMI,KAAK,KAE5B,OAAOH,EAAG,UAAME,EAAN,eAAqBF,GAAQL,EAGzC,SAASS,EACPC,EACAC,GAEC,IADDC,EACA,uDAD8B,IAExBC,EAAa/B,uBAAY,WACzB6B,GAIJD,MACC,CAACA,EAAgBC,IAGdG,EAAgB7C,EAAY4C,EAAYD,GAE9CnC,qBAAU,WAKR,IAAMsC,EAAkB,WACtBL,IACAI,KAOF,OAJAE,IAAUC,KAAK,QAASF,GACxBC,IAAUC,KAAK,QAASF,GACxBC,IAAUC,KAAK,QAASF,GAEjB,WACLC,IAAUE,OAAO,SACjBF,IAAUE,OAAO,SACjBF,IAAUE,OAAO,YAElB,CAACJ,EAAeH,EAAQD,I,mEC/JvBS,EAAW,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,+EAEGC,MAAM,GAAD,OAAIF,EAAJ,iBAFR,UAGI,OADdG,EAFU,QAGPC,OAHO,6BAIDC,IAJC,SAImBF,EAAKG,OAJxB,+BAIgC,CAC5CC,MAAM,GADFC,GAJQ,mBAQRC,EAAM,IAAIC,KARF,kBAUPF,EAAKG,KAAI,SAACC,GACf,IAAMC,EAAWC,YAASF,EAAKC,UAGzBE,EACJF,EAHcC,YAASF,EAAKI,UAI5BC,YAAoBR,EAAKI,GAAY,OACvC,OAAO,2BACFD,GADL,IAGEM,oBAAqBvC,EAAciC,EAAKM,qBACxCH,iBArBU,yBAyBKZ,EAAKgB,OAzBV,aA0BR,yBA1BQ,uEA6BV,8BA7BU,0DAAH,sDAsCXC,EAAW,uCAAG,WAAOpB,GAAP,iBAAAC,EAAA,+EAEGC,MAAM,GAAD,OAAIF,EAAJ,iBAFR,UAGI,OADdG,EAFU,QAGPC,OAHO,6BAIDC,IAJC,SAImBF,EAAKG,OAJxB,+BAIgC,CAC5CC,MAAM,GADFC,GAJQ,qCAQPA,GARO,yBAUKL,EAAKgB,OAVV,aAWR,yBAXQ,uEAcV,8BAdU,0DAAH,sD,OCtBXE,EAAaC,IAAMC,mBAAoCvD,GAEvDwD,EAAa,SAACC,EAAsBC,GACxC,OAAQA,EAAOC,MACb,IAAK,YACH,OAAO,2BACFF,GADL,IAEEG,WAAO5D,EACP6D,OAAQH,EAAOI,UAEnB,IAAK,YACH,OAAO,2BACFL,GADL,IAEEG,WAAO5D,EACP+D,OAAQL,EAAOI,UAEnB,IAAK,WACH,OAAO,2BACFL,GADL,IAEEG,MAAOF,EAAOI,UAElB,QACE,OAAOL,IAIPO,EAA8B,CAClCH,OAAQ,GACRE,OAAQ,IAGJE,EAAiC,SAACC,GAAW,IAAD,EFPlD,SACEC,EACAC,GACuB,MAGelF,oBAAY,WAChD,IAEE,IAAM0D,EAAO/C,OAAOwE,aAAaC,QAAQH,GAGzC,OAAOvB,EAAO2B,KAAKC,MAAM5B,GAAQwB,EACjC,MAAOR,GAIP,OAFAa,QAAQC,IAAId,GAELQ,MAdY,mBAGhBO,EAHgB,KAGHC,EAHG,KAiCvB,MAAO,CAACD,EAbS,SAACE,GAChB,IAEED,EAAeC,GAGfhF,OAAOwE,aAAaS,QAAQX,EAAKI,KAAKQ,UAAUF,IAChD,MAAOjB,GAEPa,QAAQC,IAAId,MExBcoB,CAC5B,iBACA,iCAH8C,mBACzChD,EADyC,KAChCiD,EADgC,OAMtBC,qBAAW1B,EAAYQ,GAND,mBAMzCP,EANyC,KAMlC0B,EANkC,KAQ1CC,EAAgB1F,sBAAW,sBAAC,4BAAAuC,EAAA,+EAEXmB,EAAYpB,GAFD,OAExBQ,EAFwB,OAG9B2C,EAAS,CACPxB,KAAM,YACNG,QAAStB,IALmB,gDAQ9B2C,EAAS,CACPxB,KAAM,WACNG,QAAS,KAAEuB,aAViB,yDAa/B,CAACF,EAAUnD,IAERsD,EAAgB5F,sBAAW,sBAAC,4BAAAuC,EAAA,+EAEXF,EAAYC,GAFD,OAExBQ,EAFwB,OAG9B2C,EAAS,CACPxB,KAAM,YACNG,QAAStB,IALmB,gDAQ9B2C,EAAS,CACPxB,KAAM,WACNG,QAAS,KAAEuB,aAViB,yDAa/B,CAACF,EAAUnD,IAOd,OALA3C,qBAAU,WACR+F,IACAE,MACC,CAACF,EAAeE,IAGjB,cAACjC,EAAWkC,SAAZ,CACEV,MAAO,CACLpB,QACAzB,UACAoD,gBACAE,gBACAL,cANJ,SASGf,EAAMsB,YAKPC,EAAc,WAClB,IAAMC,EAAUpC,IAAMqC,WAAWtC,GAEjC,QAAgBrD,IAAZ0F,EACF,MAAM,IAAIE,MAAM,qDAGlB,OAAOF,GCGMG,EAhIK,SAAC,GAQd,IAPLC,EAOI,EAPJA,WACArE,EAMI,EANJA,WACAF,EAKI,EALJA,OAKI,EAEwBrC,mBAAS,GAFjC,mBAEG6G,EAFH,KAEWC,EAFX,OAIsB9G,mBAAS,GAJ/B,mBAIG+G,EAJH,KAIUC,EAJV,KAOOnC,EACP0B,IADFhC,MAASM,OAIX1E,qBAAU,WACc,IAAlB0E,EAAOoC,QACTL,IAIF/B,EAAOpB,KAAI,YAAmC,IAAXyD,EAAU,EAA/BlD,oBACRmD,EAAQ,IAAIC,MAEhB,OADAD,EAAMD,IAAMA,EACLC,OAER,CAACtC,EAAQ+B,IAEZ,IAAMS,EAAYtH,iBAAuB,MAkBzCoC,EAhBiB3B,uBAAY,WAC3B,IAAM8G,EAAYT,EAASE,EACrBQ,EAAcD,GAAazC,EAAOoC,OAAS,EAAIK,EACjDC,IAAgBV,GAClBC,EAAUS,GAKQ,IAAhBA,EACFX,IAEArE,MAED,CAACsE,EAAQE,EAAOlC,EAAOoC,OAAQH,EAAWF,EAAYrE,IAEnCF,GAItB,IAAMnB,EAAaD,IAsCnB,OArCAuG,2BAAgB,WACTjG,EAASL,IACZ8F,EAAS,KAEV,CAAC9F,EAAY8F,IAEhBQ,2BAAgB,WAAO,IAAD,EACpB,GAAKH,EAAUjH,QAOf,IAHcc,EAAWN,OAAS,GAGtB,IACVoG,EAASnC,EAAOoC,YADlB,CAKA,IAAMQ,EAAkBJ,EAAUjH,QAAQsH,aAEpCC,EAAU,UAAGN,EAAUjH,QAAQwH,kBAArB,aAAG,EACfA,WACJ,GAAKD,EAAL,CAMA,IAAME,EAAWC,KAAKC,MACpBN,GAAmBE,EAAWD,aAAe,IAE3CX,IAAUc,GACZb,EAASa,OAEV,CAACd,EAAOC,EAAUK,EAAWxC,EAAOoC,OAAQ/F,IAG7C,qBAAK8G,UAAU,kBAAkBC,IAAKZ,EAAtC,SACE,qBAAKW,UAAU,SAAf,SACGnD,EAAOqD,MAAMrB,EAAQA,EAASE,GAAOtD,KAAI,SAACC,EAAMyE,GAC/C,OACE,eAAC,IAAMC,SAAP,WACW,IAARD,GAAa,sBAAMH,UAAU,SAC9B,sBACEA,UAAWK,IAAG,WAAY,CACxBxE,SAAUH,EAAKG,WAFnB,SAKE,qBAAKqD,IAAKxD,EAAKM,oBAAqBsE,IAAK5E,EAAK6E,aAEhD,sBACEP,UAAWK,IAAG,aAAc,CAC1BxE,SAAUH,EAAKG,WAFnB,SAKGH,EAAK8E,aAER,sBACER,UAAWK,IAAG,QAAS,CACrBxE,SAAUH,EAAKG,WAFnB,SAKG4E,OAAO/E,EAAKgF,aAAaC,qBArBTjF,EAAKkF,YCnDvBC,EAtDG,SAAC,GAUZ,IATLjC,EASI,EATJA,WACArE,EAQI,EARJA,WACAF,EAOI,EAPJA,OACAyG,EAMI,EANJA,KAQWnE,EACP4B,IADFhC,MAASI,OAILoE,EAAWxH,EADEN,KAGnBd,qBAAU,WAEH4I,GACHpE,EAAOlB,KAAI,YAAqB,IAAXyD,EAAU,EAAjBC,MACRA,EAAQ,IAAIC,MAEhB,OADAD,EAAMD,IAAMA,EACLC,OAGV,CAACxC,EAAQoE,IAEZ,IAAMlC,EAASlC,EAAOsC,OAAS6B,EAAOnE,EAAOsC,OAAS,EAEtD9G,qBAAU,WACJwE,EAAOsC,QAAUJ,GACnBD,MAED,CAACC,EAAQlC,EAAOsC,OAAQL,IAE3BzE,EAAYI,EAAYF,GAExB,IAAM2G,EAAerE,EAAOkC,GAE5B,OACE,qBAAKmB,UAAU,iBAAf,SACGgB,GACC,qBACE9B,IAAK8B,EAAa7B,MAClBmB,IAAKU,EAAaC,KAClBjB,UAAU,uBCmJLkB,MA1Lf,WACE,IAAMC,EAAWpJ,iBAAyB,MAD7B,EASTwG,IALFhC,EAJW,EAIXA,MACAzB,EALW,EAKXA,QACAiD,EANW,EAMXA,WACAG,EAPW,EAOXA,cACAE,EARW,EAQXA,cARW,EAWepG,oBAAS,GAXxB,mBAWNqC,EAXM,KAWE+G,EAXF,OAYyBpJ,mBAAmB,UAZ5C,mBAYNqJ,EAZM,KAYOC,EAZP,OAa2BtJ,mBAAS,GAbpC,mBAaNuJ,EAbM,KAaQC,EAbR,KAgBPT,EAAWxH,EADEN,KAGbwI,EAAejJ,uBAAY,WAC/B4I,GAAW/G,KACV,CAACA,EAAQ+G,IAEZjJ,qBAAU,WAGR,GAAoB,SAAhBkJ,EAMJ,OAFA3G,IAAUC,KAAK,IAAK8G,GAEb,WACL/G,IAAUE,OAAO,QAElB,CAAC6G,EAAcJ,IAElB,IAAM9G,EAAa/B,uBAAY,WAK7B,OAAQ6I,GACN,IAAK,SAEHC,EAAe,eACfE,EAAgBD,EAAe,MAKlC,CAACD,EAAgBD,EAAaE,EAAcC,IAEzC5C,EAAapG,uBAAY,WAG7B,OAAQ6I,GACN,IAAK,OACHC,EAAe,eACf,MACF,IAAK,cACHA,EAAe,UAEVP,GACH3C,IAEF,MACF,IAAK,SAGHkD,EAAe,eACfE,EAAgB,GACXT,GACH7C,IAEF,MACF,QACEoD,EAAe,kBAGlB,CACDA,EACAD,EACAnD,EACAE,EACAoD,EACAT,IAGIW,EAAWlJ,uBAAY,WACvB2I,EAAS/I,SACX2F,EAAWoD,EAAS/I,QAAQuF,OAE9B2D,EAAe,iBACd,CAACA,EAAgBH,EAAUpD,IAExB4D,EAAgBnJ,uBAAY,WAEhC8I,EAAe,QAEf3I,OAAOiJ,uBAAsB,WAC3B,IAAKT,EAAS/I,QACZ,MAAMsG,MAAM,0BAGdyC,EAAS/I,QAAQuF,MAAQ7C,OAE1B,CAACwG,EAAgBH,EAAUrG,IAExB+G,EAAyB,SAAhBR,EACTS,EAAiBf,GAA4Cc,EAAjB,gBAAhBR,EAC5BU,EAAYhB,GAAuCc,EAAZ,WAAhBR,EAEvBW,EAAezF,EAAMM,OAAOoC,OAC5BgD,EAAe1F,EAAMI,OAAOsC,OAsElC,OAlEA9G,qBAAU,WAEJ6J,IAAiBC,IAID,gBAAhBZ,GAAkCW,EAEX,WAAhBX,GAA6BY,GACtCX,EAAe,eAFfA,EAAe,aAIhB,CAACU,EAAcC,EAAcX,EAAgBD,IAG9C,sBAAKrB,UAAU,MAAf,UACE,yBAAQkC,QAASP,EAAjB,UACE,qBAAK3B,UAAU,OAAOd,IAAI,WAAWoB,IAAI,uBACzC,qBACEN,UAAU,cACVd,IAAI,uBACJoB,IAAI,mBAIP/D,EAAMG,OACL,gCACE,wCACCH,EAAMG,SAIVmF,GACC,uBAAMH,SAAUA,EAAhB,kBACO,uBAAOT,KAAK,MAAMhB,IAAKkB,IAC5B,wBAAQ1E,KAAK,SAAb,wBAIHuF,GAAgBF,GACf,cAACK,EAAD,CACEvD,WAAYA,EACZrE,WAAYA,EACZF,OAAQA,IAGX4H,GAAgBF,GACf,cAAC,EAAD,CACEnD,WAAYA,EACZrE,WAAYA,EACZF,OAAQA,EACRyG,KAAMS,IAIV,iCACE,qBAAKrC,IAAI,oBAAoBoB,IAAI,OAGlCjG,EACC,cAAC,IAAD,CAAS2F,UAAU,cAEnB,cAAC,IAAD,CAAQA,UAAU,0BClLNoC,QACW,cAA7BzJ,OAAO0J,SAASC,UAEe,UAA7B3J,OAAO0J,SAASC,UAEhB3J,OAAO0J,SAASC,SAASC,MACvB,2DCRNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAzG,GACLa,QAAQb,MAAMA,EAAM0G,c","file":"static/js/main.4bd5e47e.chunk.js","sourcesContent":["import { useEffect, useState, useRef, useCallback } from \"react\";\nimport Mousetrap from \"mousetrap\";\n\nfunction useInterval(fn: () => void, milliseconds: number) {\n  // NOTE: we use useRef here over useState for a few reasons - we don't want to\n  // stop the ticking if the callback changes.\n  const callback = useRef(fn);\n  const [trigger, setTrigger] = useState(false);\n\n  // if the provided function changes, call it once and change its reference.\n  useEffect(() => {\n    callback.current = fn;\n  }, [fn]);\n\n  // when the milliseconds change or the trigger is called, reset the timeout.\n  useEffect(() => {\n    const interval = setInterval(() => {\n      callback.current();\n    }, milliseconds);\n\n    return () => clearTimeout(interval);\n  }, [callback, milliseconds, trigger]);\n\n  // Toggle the trigger when called in order to reset the interval.\n  return useCallback(() => setTrigger(!trigger), [trigger, setTrigger]);\n}\n\ntype WindowSize = {\n  width?: number;\n  height?: number;\n};\n\nfunction getSize(): WindowSize {\n  const isClient = typeof window === \"object\";\n\n  return {\n    width: isClient ? window.innerWidth : undefined,\n    height: isClient ? window.innerHeight : undefined,\n  };\n}\n\nfunction useWindowSize(): WindowSize {\n  const [windowSize, setWindowSize] = useState(getSize);\n\n  useEffect(() => {\n    const isClient = typeof window === \"object\";\n\n    if (!isClient) {\n      return;\n    }\n\n    function handleResize() {\n      setWindowSize(getSize());\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return windowSize;\n}\n\nfunction useLocalStorage<T>(\n  key: string,\n  initialValue: T\n): [T, (val: T) => void] {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState<T>(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that persists the\n  // new value to localStorage.\n  const setValue = (value: T) => {\n    try {\n      // Save state\n      setStoredValue(value);\n\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(value));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n\nfunction isHiDpi(): boolean {\n  return !!(\n    (window.matchMedia &&\n      (window.matchMedia(\n        \"only screen and (min-resolution: 124dpi), only screen and (min-resolution: 1.3dppx), only screen and (min-resolution: 48.8dpcm)\"\n      ).matches ||\n        window.matchMedia(\n          \"only screen and (-webkit-min-device-pixel-ratio: 1.3), only screen and (-o-min-device-pixel-ratio: 2.6/2), only screen and (min--moz-device-pixel-ratio: 1.3), only screen and (min-device-pixel-ratio: 1.3)\"\n        ).matches)) ||\n    (window.devicePixelRatio && window.devicePixelRatio > 1.3)\n  );\n}\n\nfunction isRetina(): boolean {\n  return (\n    !!(\n      (window.matchMedia &&\n        (window.matchMedia(\n          \"only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx), only screen and (min-resolution: 75.6dpcm)\"\n        ).matches ||\n          window.matchMedia(\n            \"only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (-o-min-device-pixel-ratio: 2/1), only screen and (min--moz-device-pixel-ratio: 2), only screen and (min-device-pixel-ratio: 2)\"\n          ).matches)) ||\n      (window.devicePixelRatio && window.devicePixelRatio >= 2)\n    ) && /(iPad|iPhone|iPod)/g.test(navigator.userAgent)\n  );\n}\n\nfunction isMobile(size: WindowSize): boolean {\n  // Default to not mobile\n  return (size.width || 0) <= 1000;\n}\n\nfunction buildImageUrl(url: string): string {\n  if (!isHiDpi()) {\n    return url;\n  }\n\n  const split = url.split(\".\");\n  const ext = split.pop();\n  const baseName = split.join(\".\");\n\n  return ext ? `${baseName}@2x.${ext}` : url;\n}\n\nfunction useNextPage(\n  realOnNextPage: () => void,\n  paused: boolean,\n  timeout: number | undefined = 9000\n) {\n  const onNextPage = useCallback(() => {\n    if (paused) {\n      return;\n    }\n\n    realOnNextPage();\n  }, [realOnNextPage, paused]);\n\n  // Jump to the next page every 9 seconds\n  const resetNextPage = useInterval(onNextPage, timeout);\n\n  useEffect(() => {\n    // Keybinds have a unique effect on nextPage - they reset the timer which\n    // automatically jumps to the next page. Without this, there is a strange\n    // behavior where you can arrow through pages and it will look like 2 were\n    // skipped at the same time.\n    const keybindNextPage = () => {\n      realOnNextPage();\n      resetNextPage();\n    };\n\n    Mousetrap.bind(\"space\", keybindNextPage);\n    Mousetrap.bind(\"enter\", keybindNextPage);\n    Mousetrap.bind(\"right\", keybindNextPage);\n\n    return () => {\n      Mousetrap.unbind(\"space\");\n      Mousetrap.unbind(\"enter\");\n      Mousetrap.unbind(\"right\");\n    };\n  }, [resetNextPage, paused, realOnNextPage]);\n}\n\nexport {\n  useInterval,\n  useWindowSize,\n  useLocalStorage,\n  useNextPage,\n  isRetina,\n  isHiDpi,\n  isMobile,\n  buildImageUrl,\n};\n","import { differenceInSeconds, parseISO } from \"date-fns\";\nimport camelcaseKeys from \"camelcase-keys\";\nimport { buildImageUrl } from \"./utils\";\n\ntype ScoreAPIResponse = {\n  id: number;\n  gameName: string;\n  gameBanner: string;\n  gameBannerThumbnail: string;\n  playerName: string;\n  playerScore: number;\n  created: string;\n  modified: string;\n};\n\ntype Score = {\n  id: number;\n  gameName: string;\n  gameBanner: string;\n  gameBannerThumbnail: string;\n  playerName: string;\n  playerScore: number;\n  newScore: boolean;\n};\n\nconst fetchScores = async (baseURL: string): Promise<Score[]> => {\n  try {\n    const resp = await fetch(`${baseURL}/api/scores/`);\n    if (resp.status === 200) {\n      const data = camelcaseKeys(await resp.json(), {\n        deep: true,\n      }) as ScoreAPIResponse[];\n\n      const cur = new Date();\n\n      return data.map((item) => {\n        const modified = parseISO(item.modified);\n        const created = parseISO(item.created);\n\n        const newScore =\n          modified > created &&\n          differenceInSeconds(cur, modified) < 3600 * 24 * 30;\n        return {\n          ...item,\n          //newScore: Math.random() >= 0.8,\n          gameBannerThumbnail: buildImageUrl(item.gameBannerThumbnail),\n          newScore,\n        };\n      });\n    } else {\n      const text = await resp.text();\n      throw \"Failed to get scores: \" + text;\n    }\n  } catch (e) {\n    throw \"Failed to get scores: \" + e;\n  }\n};\n\ntype Image = {\n  name: string;\n  image: string;\n};\n\nconst fetchImages = async (baseURL: string): Promise<Image[]> => {\n  try {\n    const resp = await fetch(`${baseURL}/api/images/`);\n    if (resp.status === 200) {\n      const data = camelcaseKeys(await resp.json(), {\n        deep: true,\n      }) as Image[];\n\n      return data;\n    } else {\n      const text = await resp.text();\n      throw \"Failed to get scores: \" + text;\n    }\n  } catch (e) {\n    throw \"Failed to get scores: \" + e;\n  }\n};\n\nexport type { Score, Image };\n\nexport { fetchImages, fetchScores };\n","import React, {\n  useReducer,\n  useCallback,\n  useEffect,\n  FunctionComponent,\n} from \"react\";\n\nimport { fetchImages, fetchScores, Image, Score } from \"./api\";\nimport { useLocalStorage } from \"./utils\";\n\ntype InnerAPIState = {\n  images: Image[];\n  scores: Score[];\n  error?: string;\n};\n\ntype SetScoresAction = {\n  type: \"setScores\";\n  payload: Score[];\n};\n\ntype SetImagesAction = {\n  type: \"setImages\";\n  payload: Image[];\n};\n\ntype SetErrorAction = {\n  type: \"setError\";\n  payload: string;\n};\n\ntype APIAction = SetImagesAction | SetScoresAction | SetErrorAction;\n\ntype APIState = {\n  state: InnerAPIState;\n  baseURL: string;\n  refreshImages: () => Promise<void>;\n  refreshScores: () => Promise<void>;\n  setBaseURL: (baseURL: string) => void;\n};\n\nconst APIContext = React.createContext<APIState | undefined>(undefined);\n\nconst apiReducer = (state: InnerAPIState, action: APIAction): InnerAPIState => {\n  switch (action.type) {\n    case \"setImages\":\n      return {\n        ...state,\n        error: undefined,\n        images: action.payload,\n      };\n    case \"setScores\":\n      return {\n        ...state,\n        error: undefined,\n        scores: action.payload,\n      };\n    case \"setError\":\n      return {\n        ...state,\n        error: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nconst initialState: InnerAPIState = {\n  images: [],\n  scores: [],\n};\n\nconst APIProvider: FunctionComponent = (props) => {\n  const [baseURL, setBaseURL] = useLocalStorage(\n    \"leaderboardUrl\",\n    \"https://btta-api.elwert.cloud\"\n  );\n\n  const [state, dispatch] = useReducer(apiReducer, initialState);\n\n  const refreshImages = useCallback(async () => {\n    try {\n      const data = await fetchImages(baseURL);\n      dispatch({\n        type: \"setImages\",\n        payload: data,\n      });\n    } catch (e) {\n      dispatch({\n        type: \"setError\",\n        payload: e.toString(),\n      });\n    }\n  }, [dispatch, baseURL]);\n\n  const refreshScores = useCallback(async () => {\n    try {\n      const data = await fetchScores(baseURL);\n      dispatch({\n        type: \"setScores\",\n        payload: data,\n      });\n    } catch (e) {\n      dispatch({\n        type: \"setError\",\n        payload: e.toString(),\n      });\n    }\n  }, [dispatch, baseURL]);\n\n  useEffect(() => {\n    refreshImages();\n    refreshScores();\n  }, [refreshImages, refreshScores]);\n\n  return (\n    <APIContext.Provider\n      value={{\n        state,\n        baseURL,\n        refreshImages,\n        refreshScores,\n        setBaseURL,\n      }}\n    >\n      {props.children}\n    </APIContext.Provider>\n  );\n};\n\nconst useAPIState = (): APIState => {\n  const context = React.useContext(APIContext);\n\n  if (context === undefined) {\n    throw new Error(\"useCountState must be used within a CountProvider\");\n  }\n\n  return context;\n};\n\nexport { useAPIState as default, APIProvider };\n","import React, {\n  useEffect,\n  useLayoutEffect,\n  useState,\n  useRef,\n  useCallback,\n} from \"react\";\nimport cx from \"classnames\";\n\nimport { useWindowSize, isMobile, useNextPage } from \"./utils\";\nimport useAPIState from \"./useAPIState\";\n\nconst Leaderboard = ({\n  onFinished,\n  onNextPage,\n  paused,\n}: {\n  onFinished: () => void;\n  onNextPage: () => void;\n  paused: boolean,\n}) => {\n  // Page offset\n  const [offset, setOffset] = useState(0);\n  // Number on current page\n  const [count, setCount] = useState(1);\n\n  const {\n    state: { scores },\n  } = useAPIState();\n\n  // When scores are updated, preload all relevant images\n  useEffect(() => {\n    if (scores.length === 0) {\n      onFinished();\n    }\n\n    // Preload all images\n    scores.map(({ gameBannerThumbnail: src }) => {\n      let image = new Image();\n      image.src = src;\n      return image;\n    });\n  }, [scores, onFinished]);\n\n  const scoresRef = useRef<HTMLDivElement>(null);\n\n  const nextPage = useCallback(() => {\n    const newOffset = offset + count;\n    const finalOffset = newOffset >= scores.length ? 0 : newOffset;\n    if (finalOffset !== offset) {\n      setOffset(finalOffset);\n    }\n\n    // When we're done cycling through the pages, it'll trigger onFinished and\n    // jump back to zero.\n    if (finalOffset === 0) {\n      onFinished();\n    } else {\n      onNextPage();\n    }\n  }, [offset, count, scores.length, setOffset, onFinished, onNextPage]);\n\n  useNextPage(nextPage, paused);\n\n  // When the window size changes if we're not on mobile, reset it to displaying\n  // 1 so we can properly figure out how many items to display.\n  const windowSize = useWindowSize();\n  useLayoutEffect(() => {\n    if (!isMobile(windowSize)) {\n      setCount(1);\n    }\n  }, [windowSize, setCount]);\n\n  useLayoutEffect(() => {\n    if (!scoresRef.current) {\n      return;\n    }\n\n    const width = windowSize.width || 0;\n\n    // If we're on mobile, just display everything\n    if (width < 1000) {\n      setCount(scores.length);\n      return;\n    }\n\n    const containerHeight = scoresRef.current.clientHeight;\n\n    const firstScore = scoresRef.current.firstChild\n      ?.firstChild as HTMLSpanElement | null;\n    if (!firstScore) {\n      return;\n    }\n\n    // Calculate how many items we can display. Note that the extra plus one\n    // accounts for the line between rows.\n    const newCount = Math.floor(\n      containerHeight / (firstScore.clientHeight + 1)\n    );\n    if (count !== newCount) {\n      setCount(newCount);\n    }\n  }, [count, setCount, scoresRef, scores.length, windowSize]);\n\n  return (\n    <div className=\"scoresContainer\" ref={scoresRef}>\n      <div className=\"scores\">\n        {scores.slice(offset, offset + count).map((item, idx) => {\n          return (\n            <React.Fragment key={item.id}>\n              {idx !== 0 && <span className=\"line\" />}\n              <span\n                className={cx(\"gameName\", {\n                  newScore: item.newScore,\n                })}\n              >\n                <img src={item.gameBannerThumbnail} alt={item.gameName} />\n              </span>\n              <span\n                className={cx(\"playerName\", {\n                  newScore: item.newScore,\n                })}\n              >\n                {item.playerName}\n              </span>\n              <span\n                className={cx(\"score\", {\n                  newScore: item.newScore,\n                })}\n              >\n                {Number(item.playerScore).toLocaleString()}\n              </span>\n            </React.Fragment>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default Leaderboard;\n","import { useEffect } from \"react\";\nimport useAPIState from \"./useAPIState\";\nimport { isMobile, useNextPage, useWindowSize } from \"./utils\";\n\nconst ImagePage = ({\n  onFinished,\n  onNextPage,\n  paused,\n  page,\n}: {\n  onFinished: () => void;\n  onNextPage: () => void;\n  paused: boolean,\n  page: number;\n}) => {\n  const {\n    state: { images },\n  } = useAPIState();\n\n  const windowSize = useWindowSize();\n  const onMobile = isMobile(windowSize);\n\n  useEffect(() => {\n    // Preload all images on desktop\n    if (!onMobile) {\n      images.map(({ image: src }) => {\n        let image = new Image();\n        image.src = src;\n        return image;\n      });\n    }\n  }, [images, onMobile]);\n\n  const offset = images.length ? page % images.length : 0;\n\n  useEffect(() => {\n    if (images.length <= offset) {\n      onFinished();\n    }\n  }, [offset, images.length, onFinished]);\n\n  useNextPage(onNextPage, paused);\n\n  const currentImage = images[offset];\n\n  return (\n    <div className=\"imageContainer\">\n      {currentImage && (\n        <img\n          src={currentImage.image}\n          alt={currentImage.name}\n          className=\"fullscreenImage\"\n        />\n      )}\n    </div>\n  );\n};\n\nexport default ImagePage;\n","import { useState, useCallback, useRef, useEffect } from \"react\";\n\nimport Mousetrap from \"mousetrap\";\nimport { FaPause, FaPlay } from \"react-icons/fa\";\n\nimport LeaderboardPage from \"./LeaderboardPage\";\nimport useAPIState from \"./useAPIState\";\nimport ImagePage from \"./ImagePage\";\nimport { useWindowSize, isMobile } from \"./utils\";\n\ntype PageType = \"form\" | \"leaderboard\" | \"images\";\n\nfunction App() {\n  const urlInput = useRef<HTMLInputElement>(null);\n\n  const {\n    state,\n    baseURL,\n    setBaseURL,\n    refreshImages,\n    refreshScores,\n  } = useAPIState();\n\n  const [paused, setPaused] = useState(false);\n  const [currentPage, setCurrentPage] = useState<PageType>(\"images\");\n  const [imageCounter, setImageCounter] = useState(0);\n\n  const windowSize = useWindowSize();\n  const onMobile = isMobile(windowSize);\n\n  const togglePaused = useCallback(() => {\n    setPaused(!paused);\n  }, [paused, setPaused]);\n\n  useEffect(() => {\n    // We want to make sure \"p\" isn't bound when in the form so it doesn't\n    // conflict with text input.\n    if (currentPage === \"form\") {\n      return;\n    }\n\n    Mousetrap.bind(\"p\", togglePaused);\n\n    return () => {\n      Mousetrap.unbind(\"p\");\n    };\n  }, [togglePaused, currentPage]);\n\n  const onNextPage = useCallback(() => {\n    // console.log(\"onNextPage\", currentPage);\n\n    // For the most part, we ignore onNextPage, other than for images where we\n    // jump to the leaderboard.\n    switch (currentPage) {\n      case \"images\":\n        // After switching from the images, jump to the next image\n        setCurrentPage(\"leaderboard\");\n        setImageCounter(imageCounter + 1);\n        break;\n      default:\n        break;\n    }\n  }, [setCurrentPage, currentPage, imageCounter, setImageCounter]);\n\n  const onFinished = useCallback(() => {\n    // console.log(\"onFinished\", currentPage);\n\n    switch (currentPage) {\n      case \"form\":\n        setCurrentPage(\"leaderboard\");\n        break;\n      case \"leaderboard\":\n        setCurrentPage(\"images\");\n        // After switching from the leaderboard, queue up a score refresh\n        if (!onMobile) {\n          refreshScores();\n        }\n        break;\n      case \"images\":\n        // After switching from the images, jump to the next image and queue\n        // up an image refresh\n        setCurrentPage(\"leaderboard\");\n        setImageCounter(0);\n        if (!onMobile) {\n          refreshImages();\n        }\n        break;\n      default:\n        setCurrentPage(\"leaderboard\");\n        break;\n    }\n  }, [\n    setCurrentPage,\n    currentPage,\n    refreshImages,\n    refreshScores,\n    setImageCounter,\n    onMobile,\n  ]);\n\n  const onSubmit = useCallback(() => {\n    if (urlInput.current) {\n      setBaseURL(urlInput.current.value);\n    }\n    setCurrentPage(\"leaderboard\");\n  }, [setCurrentPage, urlInput, setBaseURL]);\n\n  const onHeaderClick = useCallback(() => {\n    // Wait for the next animation frame and set the value\n    setCurrentPage(\"form\");\n\n    window.requestAnimationFrame(() => {\n      if (!urlInput.current) {\n        throw Error(\"couldn't get input ref\");\n      }\n\n      urlInput.current.value = baseURL;\n    });\n  }, [setCurrentPage, urlInput, baseURL]);\n\n  const onForm = currentPage === \"form\";\n  const onLeaderboard = !onMobile ? currentPage === \"leaderboard\" : !onForm;\n  const onImages = !onMobile ? currentPage === \"images\" : !onForm;\n\n  const scoresLoaded = state.scores.length;\n  const imagesLoaded = state.images.length;\n\n  // This black magic is to avoid an error on startup where it will spin between\n  // pages while loading.\n  useEffect(() => {\n    // If they're both loaded or unloaded, we can't do anything, so bail early.\n    if (scoresLoaded === imagesLoaded) {\n      return;\n    }\n\n    if (currentPage === \"leaderboard\" && !scoresLoaded) {\n      setCurrentPage(\"images\");\n    } else if (currentPage === \"images\" && !imagesLoaded) {\n      setCurrentPage(\"leaderboard\");\n    }\n  }, [scoresLoaded, imagesLoaded, setCurrentPage, currentPage]);\n\n  const ret = (\n    <div className=\"App\">\n      <header onClick={onHeaderClick}>\n        <img className=\"logo\" src=\"logo.png\" alt=\"Back to the Arcade\" />\n        <img\n          className=\"leaderboard\"\n          src=\"leaderboard-text.png\"\n          alt=\"Leaderboard\"\n        />\n      </header>\n\n      {state.error && (\n        <div>\n          <h2>Error:</h2>\n          {state.error}\n        </div>\n      )}\n\n      {onForm && (\n        <form onSubmit={onSubmit}>\n          URL: <input name=\"url\" ref={urlInput} />\n          <button type=\"submit\">Connect</button>\n        </form>\n      )}\n\n      {scoresLoaded && onLeaderboard && (\n        <LeaderboardPage\n          onFinished={onFinished}\n          onNextPage={onNextPage}\n          paused={paused}\n        />\n      )}\n      {imagesLoaded && onImages && (\n        <ImagePage\n          onFinished={onFinished}\n          onNextPage={onNextPage}\n          paused={paused}\n          page={imageCounter}\n        />\n      )}\n\n      <footer>\n        <img src=\"pacman-ghosts.jpg\" alt=\"\" />\n      </footer>\n\n      {paused ? (\n        <FaPause className=\"playPause\" />\n      ) : (\n        <FaPlay className=\"playPause fadeOut\" />\n      )}\n    </div>\n  );\n\n  return ret;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"normalize.css\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { APIProvider } from \"./useAPIState\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <APIProvider>\n      <App />\n    </APIProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}